#!/usr/bin/env node

var secrets = require('../config/secrets');
var mongoose = require('mongoose');

// Data Models
var DataSource = require('../models/dataSource');
var TapListing = require('../models/tapListing');

// Scraper modules
var chucksGreenwood = require('../scrapers/chucksGreenwood');
var theYardCafe = require('../scrapers/theYardCafe');
var uber = require('../scrapers/uber');
var nakedCity = require('../scrapers/nakedCity');

var async = require('async');

mongoose.connect(secrets.db);

var scrapers = {
    'chucksGreenwood': chucksGreenwood,
    'theYardCafe': theYardCafe,
    'uber': uber,
    'nakedCity': nakedCity
};

function scrapeDataSources(callback) {
    DataSource.find({}, function(err, dataSources) {
        if (err) {
            console.log('ERROR: Failed to read data sources from the database');
            return callback();
        }

        async.eachSeries(dataSources, function(dataSource, itrCallback) {
            console.log('Updating data source: ' + dataSource.name);

            var scraper = scrapers[dataSource.scraper];
            scraper.scrapeSite(function(err, beers) {
                if (err) {
                    console.log('ERROR: Failed to scrape ' + dataSource.name);
                    console.dir(err);
                    return itrCallback();
                }
                storeBeers(dataSource, beers, itrCallback);
            });
        }, function(err) {
            console.log('Finished updating data sources');
            callback();
        });
    });
};

function storeBeers(dataSource, beers, callback) {
    TapListing.find({ dataSource: dataSource }, function(err, currentListings) {
        var newListings = beers.filter(function(newBeer) {
            return !currentListings.some(function(currentTap) {
                return currentTap.rawListing === newBeer;
            });
        });

        var removedListings = currentListings.filter(function(currentTap) {
            return !beers.some(function(newBeer) {
                return newBeer === currentTap.rawListing;
            });
        });

        var operations = [];

        for (var i = 0; i < newListings.length; i++) {
            console.log(' + ' + newListings[i]);
            operations.push({ listing: newListings[i], type: 'add' });
        }

        for (var i = 0; i < removedListings.length; i++) {
            console.log(' - ' + removedListings[i].rawListing);
            operations.push({ listing: removedListings[i], type: 'remove' });
        }

        async.eachSeries(operations, function(operation, itrCallback) {
            switch(operation.type) {
                case 'add':
                    var newTapListing = new TapListing();
                    newTapListing.rawListing = operation.listing;
                    newTapListing.dataSource = dataSource;
                    newTapListing.createdDate = new Date();
                    newTapListing.isActive = true;

                    newTapListing.save(function(err, listing) {
                        if (err) {
                            console.log('ERROR: Error saving tap listing: ' + listing.rawListing);
                            console.dir(err);
                            return itrCallback();
                        }

                        return itrCallback();
                    });
                    break;

                case 'remove':
                    TapListing.findById(operation.listing.id).remove(function(err) {
                        if (err) {
                            console.log('ERROR: Error deleting tap listing');
                            console.dir(err);
                        }
                        return itrCallback();
                    });
                    break;
                };
        }, function(err) {
            console.log('Finished updating tap listings for ' + dataSource.name);

            if (operations.length == 0) {
                return callback();
            }

            dataSource.update({ $push: { updates: new Date() }}, function(err, item) {
                if (err) {
                    console.log('ERROR: Error adding update timestamp to dataSource!');
                }

                return callback();
            });
        });
    });
};

async.series([
    function(callback) {
        scrapeDataSources(callback);
    }
], function() {
    process.exit();
});
